{"version":3,"sources":["TodoBanner.js","TodoCreator.js","TodoRow.js","VisiblityControl.js","App.js","serviceWorker.js","index.js"],"names":["TodoBanner","render","className","props","name","tasks","filter","t","done","length","Component","TodoCreator","updateNewTextValue","event","setState","newItemText","target","value","createNewTodo","callback","state","onChange","onClick","TodoRow","item","action","type","checked","VisiblityControl","isChecked","e","description","App","task","todoItems","find","toggleTodo","todo","map","todoTableRows","doneValue","key","userName","showCompleted","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.fc7c470a.chunk.js","sourcesContent":["import React, { Component } from 'react';\nexport class TodoBanner extends Component {\n    render = () =>\n        <h4 className=\"bg-primary text-white text-center p-2\">\n        { this.props.name }'s To Do List\n        ({ this.props.tasks.filter(t => !t.done).length } items to do)\n        </h4>\n}","import React, { Component } from 'react';\n\nexport class TodoCreator extends Component {\n    constructor(props) {\n        super(props);\n        this.state = { newItemText: \"\" }\n    }\n    updateNewTextValue = (event) => {\n        this.setState({ newItemText: event.target.value});\n    }\n    createNewTodo = () => {\n        this.props.callback(this.state.newItemText);\n        this.setState({ newItemText: \"\"});\n    }\n    \n    render = () =>\n        <div className=\"my-1\">\n            <input className=\"form-control \" value={ this.state.newItemText }\n                   onChange={ this.updateNewTextValue } />\n            <button className=\"btn btn-primary mt-1\"\n                    onClick={ this.createNewTodo }>Add</button>\n        </div>\n}","import React, { Component } from 'react';\n\nexport class TodoRow extends Component {\n    render = () =>\n        <tr>\n            <td>{ this.props.item.action}</td>\n            <td>\n                <input type=\"checkbox\" checked={ this.props.item.done }\n                       onChange={ () => this.props.callback(this.props.item) }\n                />\n            </td>\n        </tr>\n}","import React, { Component } from 'react';\n\nexport class VisiblityControl extends Component {\n    render = () =>\n        <div className=\"form-check\">\n            <input className=\"form-check-input\" type=\"checkbox\"\n                checked={ this.props.isChecked }\n                onChange={ (e) => this.props.callback(e.target.checked) } />\n            <label className=\"form-check-label\">\n                Show { this.props.description }\n            </label>\n        </div>\n}","import React, { Component } from 'react';\nimport { TodoBanner } from \"./TodoBanner\";\nimport { TodoCreator } from \"./TodoCreator\";\nimport { TodoRow } from \"./TodoRow\";\nimport {VisiblityControl} from \"./VisiblityControl\";\n\n\nclass App extends Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      userName: \"Manan\",\n      todoItems: [\n        {action: \"Study React\", done: false},\n        {action: \"Study JS - FCC\", done: false},\n        {action: \"Study Udacity- Bertelsmann Tech Scholarship Challenge Course - AI Track Nanodegree Program\", done: false},\n        {action: \"Study Udacity- IntelÂ® Edge AI Scholarship Foundation Course Nanodegree Program\", done: false},\n        {action: \"Draft Alumni Email\", done: false}\n      ],\n      showCompleted: true\n    }\n  }\n\n  updateNewTextValue = (event) => {\n    this.setState({newItemText: event.target.value});\n  }\n\n  createNewTodo = (task) => {\n    if (!this.state.todoItems.find(item => item.action === task)) {\n      this.setState({\n        todoItems: [...this.state.todoItems, { action: task, done: false }]\n      });\n    }\n  }\n    \n\n  toggleTodo = (todo) => this.setState({ todoItems:\n  this.state.todoItems.map(item => item.action === todo.action\n    ? {...item, done: !item.done} : item)});\n\n  todoTableRows = (doneValue) => this.state.todoItems.filter(item => item.done === doneValue).map( item =>\n    <TodoRow key={ item.action } item={ item } callback={ this.toggleTodo } />)\n      \n\n  render = () => \n      <div className=\"text-center\">\n        <TodoBanner name = {this.state.userName} tasks = {this.state.todoItems}/>\n        <div className=\"container-fluid\">\n          <TodoCreator callback={ this.createNewTodo } />\n          <table className=\"table table-striped table-borderd\">\n            <thead>\n              <tr>\n                <th>Description</th>\n                <th>Done</th>\n                </tr>\n            </thead>\n            <tbody>{ this.todoTableRows(false) }</tbody>\n          </table>\n          <div className=\"bg-secondary text-white text-center p-2\">\n            <VisiblityControl description=\"Completed Tasks\"\n              isChecked={this.state.showCompleted}\n              callback={ (checked) =>\n                this.setState({ showCompleted: checked })} />\n          </div>\n          \n            { this.state.showCompleted &&\n              <table className=\"table table-striped table-bordered\">\n                <thead>\n                  <tr><th>Description</th><th>Done</th></tr>\n                </thead>\n                <tbody>{ this.todoTableRows(true) }</tbody>\n              </table>\n            }\n        </div>\n      </div>\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}